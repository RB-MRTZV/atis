# CloudWatch resources for AWS Instance Scheduler

variable "stack_name" {
  description = "Name of the CloudFormation stack"
  type        = string
}

variable "log_retention_days" {
  description = "Number of days to retain logs"
  type        = number
  default     = 30
}

variable "scheduling_active" {
  description = "Whether scheduling is active"
  type        = bool
  default     = true
}

variable "scheduler_frequency" {
  description = "Scheduler frequency in minutes"
  type        = number
  default     = 5
}

variable "scheduler_cron_expression" {
  description = "Cron expression for the scheduler"
  type        = string
}

variable "scheduler_orchestrator_lambda_arn" {
  description = "ARN of the scheduler orchestrator Lambda function"
  type        = string
}

variable "tags" {
  description = "Tags to apply to resources"
  type        = map(string)
  default     = {}
}

# Main log group for the scheduler
resource "aws_cloudwatch_log_group" "scheduler_log_group" {
  name              = "${var.stack_name}-logs"
  retention_in_days = var.log_retention_days
  tags              = var.tags
}

# Event rule to trigger the orchestrator
resource "aws_cloudwatch_event_rule" "scheduler_event_rule" {
  name                = "${var.stack_name}-SchedulerEventRule"
  description         = "Instance Scheduler - Rule to trigger instance scheduler function version v3.0.9"
  schedule_expression = var.scheduler_cron_expression
  state               = var.scheduling_active ? "ENABLED" : "DISABLED"
  tags                = var.tags
}

# Target for the event rule
resource "aws_cloudwatch_event_target" "scheduler_event_target" {
  rule      = aws_cloudwatch_event_rule.scheduler_event_rule.name
  target_id = "Target0"
  arn       = var.scheduler_orchestrator_lambda_arn
  input     = jsonencode({
    scheduled_action = "run_orchestrator"
  })

  retry_policy {
    maximum_retry_attempts = 5
  }
}

output "scheduler_log_group_arn" {
  description = "ARN of the scheduler log group"
  value       = aws_cloudwatch_log_group.scheduler_log_group.arn
}

output "scheduler_log_group_name" {
  description = "Name of the scheduler log group"
  value       = aws_cloudwatch_log_group.scheduler_log_group.name
}

output "scheduler_event_rule_arn" {
  description = "ARN of the scheduler event rule"
  value       = aws_cloudwatch_event_rule.scheduler_event_rule.arn
}

output "scheduler_event_rule_name" {
  description = "Name of the scheduler event rule"
  value       = aws_cloudwatch_event_rule.scheduler_event_rule.name
}
