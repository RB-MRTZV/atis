# Example GitLab CI configuration for EKS Scheduler
# This shows how to use artifacts to persist node group state between jobs
# Works with single cluster and EKS Autoscaler

stages:
  - scale-down
  - scale-up

variables:
  PYTHON_VERSION: "3.9"
  AWS_DEFAULT_REGION: "us-west-2"
  EKS_CLUSTER_NAME: "my-cluster"  # Set your cluster name here
  MIN_NODES: "1"                  # Minimum nodes when scaling up

# Scale down EKS cluster (e.g., for cost savings during off-hours)
eks-scale-down:
  stage: scale-down
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install boto3 tabulate
    - cd eks-scheduler/src
  script:
    - python main.py --action stop --cluster $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION
  artifacts:
    paths:
      - eks-scheduler/src/state/    # Persist state files
      - eks-scheduler/src/reports/  # Persist reports  
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCALE_ACTION == "down"
    - when: manual

# Scale up EKS cluster (restore from saved state with min nodes)
eks-scale-up:
  stage: scale-up
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install boto3 tabulate
    - cd eks-scheduler/src
  script:
    - python main.py --action start --cluster $EKS_CLUSTER_NAME --min-nodes $MIN_NODES --region $AWS_DEFAULT_REGION
  dependencies:
    - eks-scale-down  # Download artifacts from scale-down job
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCALE_ACTION == "up"
    - when: manual

# Alternative: Combined job that can do both actions
eks-scheduler:
  stage: scale-down
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install boto3 tabulate
    - cd eks-scheduler/src
  script:
    - |
      if [ "$SCALE_ACTION" = "down" ]; then
        python main.py --action stop --cluster $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION
      elif [ "$SCALE_ACTION" = "up" ]; then
        python main.py --action start --cluster $EKS_CLUSTER_NAME --min-nodes $MIN_NODES --region $AWS_DEFAULT_REGION
      else
        echo "SCALE_ACTION must be 'up' or 'down'"
        exit 1
      fi
  artifacts:
    paths:
      - eks-scheduler/src/state/    # Persist state files
      - eks-scheduler/src/reports/  # Persist reports
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: manual

# Dry run job for testing
eks-dry-run:
  stage: scale-down
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install boto3 tabulate
    - cd eks-scheduler/src
  script:
    - python main.py --action stop --cluster $EKS_CLUSTER_NAME --dry-run --region $AWS_DEFAULT_REGION
  rules:
    - when: manual
  allow_failure: true

# Manual job with custom parameters (override cluster and min nodes)
eks-custom:
  stage: scale-down
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install boto3 tabulate
    - cd eks-scheduler/src
  script:
    - |
      CLUSTER=${CUSTOM_CLUSTER:-$EKS_CLUSTER_NAME}
      MIN_NODES_VAL=${CUSTOM_MIN_NODES:-$MIN_NODES}
      
      if [ "$SCALE_ACTION" = "down" ]; then
        python main.py --action stop --cluster $CLUSTER --region $AWS_DEFAULT_REGION
      elif [ "$SCALE_ACTION" = "up" ]; then
        python main.py --action start --cluster $CLUSTER --min-nodes $MIN_NODES_VAL --region $AWS_DEFAULT_REGION
      else
        echo "SCALE_ACTION must be 'up' or 'down'"
        exit 1
      fi
  artifacts:
    paths:
      - eks-scheduler/src/state/    # Persist state files
      - eks-scheduler/src/reports/  # Persist reports
    expire_in: 1 week
  rules:
    - when: manual
  variables:
    CUSTOM_CLUSTER: ""      # Override with specific cluster name
    CUSTOM_MIN_NODES: ""    # Override with specific min nodes 