locals {
  # Solution metadata - equivalent to CloudFormation mappings
  solution_id               = "SO0030"
  solution_version          = "v3.0.9"
  app_registry_name         = "instance-scheduler-on-aws"
  app_registry_application_type = "AWS-Solutions"
  
  # Anonymous usage data
  send_anonymous_usage_data = "Yes"
  
  # Stack naming
  stack_name                = terraform.workspace == "default" ? "instance-scheduler-on-aws" : "instance-scheduler-on-aws-${terraform.workspace}"
  
  # S3 location for Lambda code
  s3_bucket                 = "solutions-${data.aws_region.current.name}"
  s3_key                    = "instance-scheduler-on-aws/v3.0.9/499b832066a86af31d65a25a6537b8106429be631acd5aa9341d4547cbf41766.zip"
  
  # Converting CloudFormation conditions to Terraform boolean expressions
  anonymized_metrics_enabled        = local.send_anonymous_usage_data == "Yes"
  scheduling_active_condition       = var.scheduling_active == "Yes"
  trace_condition                   = var.trace == "Yes"
  schedule_ec2_condition            = var.schedule_ec2 == "Enabled"
  schedule_rds_condition            = var.schedule_rds == "Enabled"
  enable_rds_cluster_condition      = var.enable_rds_cluster_scheduling == "Enabled"
  schedule_neptune_condition        = var.schedule_neptune == "Enabled"
  schedule_docdb_condition          = var.schedule_docdb == "Enabled"
  create_rds_snapshot_condition     = var.create_rds_snapshot == "Yes"
  schedule_lambda_account_condition = var.schedule_lambda_account == "Yes"
  enable_ssm_maintenance_windows    = var.enable_ssm_maintenance_windows == "Yes"
  using_aws_organizations_condition = var.using_aws_organizations == "Yes"
  ops_monitoring_condition          = var.ops_monitoring == "Enabled"
  ddb_deletion_protection_condition = var.ddb_deletion_protection == "Enabled"
  schedule_asgs_condition           = var.schedule_asgs == "Enabled"
  scheduler_role_kms_access         = var.kms_key_arns != ""
  
  # Cron expressions mapping for scheduling intervals
  cron_expressions_map = {
    "1"  = "cron(0/1 * * * ? *)"
    "2"  = "cron(0/2 * * * ? *)"
    "5"  = "cron(0/5 * * * ? *)"
    "10" = "cron(0/10 * * * ? *)"
    "15" = "cron(0/15 * * * ? *)"
    "30" = "cron(0/30 * * * ? *)"
    "60" = "cron(0 0/1 * * ? *)"
  }
  
  # Metrics scheduling interval to seconds mapping
  metrics_scheduling_seconds = {
    "1"  = "60"
    "2"  = "120"
    "5"  = "300"
    "10" = "600"
    "15" = "900"
    "30" = "1800"
    "60" = "3600"
  }
  
  # Convert scheduler frequency to string for lookups
  scheduler_frequency_str   = tostring(var.scheduler_frequency)
  scheduler_cron_expression = local.cron_expressions_map[local.scheduler_frequency_str]
  metrics_interval_seconds  = local.metrics_scheduling_seconds[local.scheduler_frequency_str]
  
  # Parse comma-separated lists
  kms_key_arns_list         = var.kms_key_arns != "" ? split(",", var.kms_key_arns) : []
  principals_list           = var.principals != "" ? split(",", var.principals) : []
  regions_list              = var.regions != "" ? split(",", var.regions) : []
  
  # Common tags to be applied to all resources
  common_tags = {
    awsApplication = "instance-scheduler-on-aws"
    SolutionId     = local.solution_id
    SolutionVersion = local.solution_version
  }
}
