# IAM roles and policies for AWS Instance Scheduler

variable "namespace" {
  description = "Namespace for resource naming"
  type        = string
}

variable "stack_name" {
  description = "Name of the CloudFormation stack"
  type        = string
}

variable "kms_key_arn" {
  description = "ARN of the KMS key for encryption"
  type        = string
}

variable "sns_topic_arn" {
  description = "ARN of the SNS topic for notifications"
  type        = string
}

variable "log_group_arn" {
  description = "ARN of the scheduler log group"
  type        = string
}

variable "config_table_arn" {
  description = "ARN of the configuration DynamoDB table"
  type        = string
}

variable "state_table_arn" {
  description = "ARN of the state DynamoDB table"
  type        = string
}

variable "maintenance_window_table_arn" {
  description = "ARN of the maintenance window DynamoDB table"
  type        = string
}

variable "enable_ec2_service" {
  description = "Whether EC2 scheduling is enabled"
  type        = bool
  default     = true
}

variable "enable_rds_service" {
  description = "Whether RDS scheduling is enabled"
  type        = bool
  default     = true
}

variable "enable_rds_clusters" {
  description = "Whether RDS cluster scheduling is enabled"
  type        = bool
  default     = true
}

variable "create_rds_snapshot" {
  description = "Whether to create RDS snapshots before stopping"
  type        = bool
  default     = false
}

variable "kms_key_arns_list" {
  description = "List of KMS key ARNs for EC2 EBS volume encryption"
  type        = list(string)
  default     = []
}

variable "tags" {
  description = "Tags to apply to resources"
  type        = map(string)
  default     = {}
}

# Role for the scheduling orchestrator
resource "aws_iam_role" "scheduler_orchestrator_role" {
  name = "${var.namespace}-SchedulingOrchestrator-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

# Role for the scheduling request handler
resource "aws_iam_role" "scheduling_request_handler_role" {
  name = "${var.namespace}-SchedulingRequestHandler-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

# Role for the scheduler service
resource "aws_iam_role" "scheduler_role" {
  name = "${var.namespace}-Scheduler-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          AWS = aws_iam_role.scheduling_request_handler_role.arn
        }
      }
    ]
  })

  tags = var.tags
}

# Role for ASG scheduling
resource "aws_iam_role" "asg_role" {
  name = "${var.namespace}-AsgRequestHandler-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

# Role for ASG scheduling in target accounts
resource "aws_iam_role" "asg_scheduling_role" {
  name = "${var.namespace}-ASG-Scheduling-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          AWS = aws_iam_role.asg_role.arn
        }
      }
    ]
  })

  tags = var.tags
}

# Core permissions for the scheduler role
resource "aws_iam_policy" "scheduler_role_permissions" {
  name        = "${var.namespace}-SchedulerRolePermissions"
  description = "Permissions for the Instance Scheduler role"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = concat([
      {
        Action = "ec2:DescribeInstances"
        Effect = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:ModifyInstanceAttribute"
        ]
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:ec2:*:${data.aws_caller_identity.current.account_id}:instance/*"
      },
      {
        Action = "ssm:DescribeMaintenanceWindows"
        Effect = "Allow"
        Resource = "*"
      }
    ],
    # RDS permissions if enabled
    var.enable_rds_service ? [
      {
        Action = [
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances",
          "tag:GetResources"
        ]
        Effect = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "rds:DeleteDBSnapshot",
          "rds:DescribeDBSnapshots",
          "rds:StopDBInstance",
          "rds:CreateDBSnapshot",
          "rds:AddTagsToResource"
        ]
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:rds:*:${data.aws_caller_identity.current.account_id}:snapshot:*"
      },
      {
        Action = [
          "rds:AddTagsToResource",
          "rds:RemoveTagsFromResource",
          "rds:StartDBInstance",
          "rds:StopDBInstance",
          "rds:CreateDBSnapshot"
        ]
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:rds:*:${data.aws_caller_identity.current.account_id}:db:*"
      }
    ] : [],
    # RDS cluster permissions if enabled
    var.enable_rds_clusters ? [
      {
        Action = [
          "rds:AddTagsToResource",
          "rds:RemoveTagsFromResource",
          "rds:StartDBCluster",
          "rds:StopDBCluster",
          "rds:CreateDBClusterSnapshot"
        ]
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:rds:*:${data.aws_caller_identity.current.account_id}:cluster:*"
      }
    ] : [])
  })
}

# KMS permissions for the scheduler role if configured
resource "aws_iam_policy" "scheduler_role_kms_permissions" {
  count       = length(var.kms_key_arns_list) > 0 ? 1 : 0
  name        = "${var.namespace}-SchedulerRoleKmsPermissions"
  description = "KMS permissions for the Instance Scheduler role"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "kms:CreateGrant"
        Effect = "Allow"
        Resource = var.kms_key_arns_list
        Condition = {
          Bool = {
            "kms:GrantIsForAWSResource" = true
          },
          StringLike = {
            "kms:ViaService" = "ec2.*.amazonaws.com"
          },
          "ForAllValues:StringEquals" = {
            "kms:GrantOperations" = ["Decrypt"],
            "kms:EncryptionContextKeys" = ["aws:ebs:id"]
          },
          Null = {
            "kms:EncryptionContextKeys" = false,
            "kms:GrantOperations" = false
          }
        }
      }
    ]
  })
}

# ASG scheduling permissions
resource "aws_iam_policy" "asg_scheduling_permissions" {
  name        = "${var.namespace}-AsgSchedulingPermissions"
  description = "Permissions for ASG scheduling"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "autoscaling:BatchPutScheduledUpdateGroupAction",
          "autoscaling:BatchDeleteScheduledAction",
          "autoscaling:CreateOrUpdateTags"
        ]
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:autoscaling:*:${data.aws_caller_identity.current.account_id}:autoScalingGroup:*:autoScalingGroupName/*"
      },
      {
        Action = [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeScheduledActions"
        ]
        Effect = "Allow"
        Resource = "*"
      }
    ]
  })
}

# Scheduling request handler policy for cross-account access
resource "aws_iam_policy" "scheduling_request_handler_policy" {
  name        = "${var.namespace}-SchedulingRequestHandlerPolicy"
  description = "Policy for the scheduling request handler"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "kms:Decrypt",
          "kms:DescribeKey"
        ]
        Effect = "Allow"
        Resource = var.kms_key_arn
      },
      {
        Action = [
          "dynamodb:BatchGetItem",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:Query",
          "dynamodb:GetItem",
          "dynamodb:Scan",
          "dynamodb:ConditionCheckItem",
          "dynamodb:DescribeTable"
        ]
        Effect = "Allow"
        Resource = var.config_table_arn
      },
      {
        Action = [
          "dynamodb:BatchGetItem",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:Query",
          "dynamodb:GetItem",
          "dynamodb:Scan",
          "dynamodb:ConditionCheckItem",
          "dynamodb:BatchWriteItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:DescribeTable"
        ]
        Effect = "Allow"
        Resource = var.state_table_arn
      },
      {
        Action = [
          "dynamodb:BatchGetItem",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:Query",
          "dynamodb:GetItem",
          "dynamodb:Scan",
          "dynamodb:ConditionCheckItem",
          "dynamodb:BatchWriteItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:DescribeTable"
        ]
        Effect = "Allow"
        Resource = var.maintenance_window_table_arn
      },
      {
        Action = "sns:Publish"
        Effect = "Allow"
        Resource = var.sns_topic_arn
      },
      {
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey*"
        ]
        Effect = "Allow"
        Resource = var.kms_key_arn
      },
      {
        Action = [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect = "Allow"
        Resource = var.log_group_arn
      },
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Resource = "arn:${data.aws_partition.current.partition}:iam::*:role/${var.namespace}-Scheduler-Role"
      },
      {
        Action = "cloudwatch:PutMetricData"
        Effect = "Allow"
        Resource = "*"
        Condition = {
          StringEquals = {
            "cloudwatch:namespace" = "${var.stack_name}:InstanceScheduler"
          }
        }
      }
    ]
  })
}

# Attach policies to roles
resource "aws_iam_role_policy_attachment" "scheduler_role_permissions_attachment" {
  role       = aws_iam_role.scheduler_role.name
  policy_arn = aws_iam_policy.scheduler_role_permissions.arn
}

resource "aws_iam_role_policy_attachment" "scheduler_role_kms_permissions_attachment" {
  count      = length(var.kms_key_arns_list) > 0 ? 1 : 0
  role       = aws_iam_role.scheduler_role.name
  policy_arn = aws_iam_policy.scheduler_role_kms_permissions[0].arn
}

resource "aws_iam_role_policy_attachment" "asg_scheduling_permissions_attachment" {
  role       = aws_iam_role.asg_scheduling_role.name
  policy_arn = aws_iam_policy.asg_scheduling_permissions.arn
}

resource "aws_iam_role_policy_attachment" "scheduling_request_handler_policy_attachment" {
  role       = aws_iam_role.scheduling_request_handler_role.name
  policy_arn = aws_iam_policy.scheduling_request_handler_policy.arn
}

# Xray permissions for Lambda functions
resource "aws_iam_policy" "xray_permissions" {
  name        = "${var.namespace}-XrayPermissions"
  description = "X-Ray permissions for Lambda functions"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords"
        ]
        Effect = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "scheduler_orchestrator_xray" {
  role       = aws_iam_role.scheduler_orchestrator_role.name
  policy_arn = aws_iam_policy.xray_permissions.arn
}

resource "aws_iam_role_policy_attachment" "scheduling_request_handler_xray" {
  role       = aws_iam_role.scheduling_request_handler_role.name
  policy_arn = aws_iam_policy.xray_permissions.arn
}

resource "aws_iam_role_policy_attachment" "asg_role_xray" {
  role       = aws_iam_role.asg_role.name
  policy_arn = aws_iam_policy.xray_permissions.arn
}

# Outputs for other modules
output "scheduler_orchestrator_role_arn" {
  description = "ARN of the scheduler orchestrator role"
  value       = aws_iam_role.scheduler_orchestrator_role.arn
}

output "scheduling_request_handler_role_arn" {
  description = "ARN of the scheduling request handler role"
  value       = aws_iam_role.scheduling_request_handler_role.arn
}

output "scheduler_role_arn" {
  description = "ARN of the scheduler role"
  value       = aws_iam_role.scheduler_role.arn
}

output "asg_role_arn" {
  description = "ARN of the ASG role"
  value       = aws_iam_role.asg_role.arn
}

output "asg_scheduling_role_arn" {
  description = "ARN of the ASG scheduling role"
  value       = aws_iam_role.asg_scheduling_role.arn
}
